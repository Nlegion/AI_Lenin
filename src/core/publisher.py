import logging
from src.core.adapters.telegram.service import TelegramService
from src.core.settings.config import Settings
import html
import re

logger = logging.getLogger(__name__)


def clean_telegram_text(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram"""
    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[\x00-\x1F\x7F-\x9F]', '', text)
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ HTML-—Å—É—â–Ω–æ—Å—Ç–∏
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    return text.strip()

class TelegramPublisher:
    def __init__(self):
        self.config = Settings()
        self.service = TelegramService()



    async def publish_analysis(self, news_id: str, title: str, url: str, analysis: str) -> bool:
        try:
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è: {title[:30]}...")

            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤

            title = clean_telegram_text(title)
            analysis = clean_telegram_text(analysis)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã
            message = (
                f"<b>üì∞ {title}</b>\n\n"
                f"<i>üí¨ –ê–Ω–∞–ª–∏–∑ –í–ª–∞–¥–∏–º–∏—Ä–∞ –ò–ª—å–∏—á–∞ –õ–µ–Ω–∏–Ω–∞:</i>\n"
                f"{analysis}\n\n"
                f"<a href='{url}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram limit: 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(message) > 4000:
                logger.warning("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–∫—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                analysis = analysis[:500] + "..."
                message = (
                    f"<b>üì∞ {title}</b>\n\n"
                    f"<i>üí¨ –ê–Ω–∞–ª–∏–∑ –í–ª–∞–¥–∏–º–∏—Ä–∞ –ò–ª—å–∏—á–∞ –õ–µ–Ω–∏–Ω–∞:</i>\n"
                    f"{analysis}\n\n"
                    f"<a href='{url}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
                )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = await self.service.send_message(
                chat_id=self.config.TELEGRAM_CHANNEL_ID,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if response and response.get("ok", False):
                return True

            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response}")
            return False

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return False

    async def send_admin_notification(self, message: str) -> bool:
        try:
            if not self.config.TELEGRAM_ADMIN_ID:
                return False

            response = await self.service.send_message(
                chat_id=self.config.TELEGRAM_ADMIN_ID,
                text=message
            )
            return response.get("ok", False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}")
            return False