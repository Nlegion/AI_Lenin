import asyncio
import time
import logging
from src.core.database.repositories.news_repository import NewsRepository
from src.modules.news_system.fetcher import NewsFetcher
from src.core.lenin_analyzer import LeninAnalyzer
from src.core.publisher import TelegramPublisher
from src.core.settings.config import Settings
from src.core.utils.decorators import handle_errors
from src.core.database.db_core import session_scope
import gc
import torch
import threading

logger = logging.getLogger(__name__)


class NewsProcessor:
    def __init__(self):
        self.config = Settings()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NewsFetcher")
        self.fetcher = NewsFetcher()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        self.analyzer = None
        self.analyzer_ready = asyncio.Event()

        logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LeninAnalyzer")
        asyncio.create_task(self.initialize_analyzer_async())

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramPublisher")
        self.publisher = TelegramPublisher()

        self.stats = {
            "news_fetched": 0,
            "news_processed": 0,
            "analyses_published": 0,
            "errors": 0
        }

    @handle_errors
    async def initialize_analyzer_async(self):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.analyzer = LeninAnalyzer()

            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            torch.cuda.empty_cache()
            gc.collect()
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await self.publisher.send_admin_notification(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)[:300]}")
        finally:
            self.analyzer_ready.set()

    @handle_errors
    async def fetch_new_news(self):
        try:
            news_items = self.fetcher.fetch_all()
            async with session_scope() as session:
                repo = NewsRepository(session)
                await repo.save_news(news_items)
            self.stats["news_fetched"] += len(news_items)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
            self.stats["errors"] += 1
            await self.publisher.send_admin_notification(f"üö® –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")

    @handle_errors
    async def process_pending_news(self):
        if not self.analyzer_ready.is_set():
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
            await asyncio.sleep(5)
            if not self.analyzer_ready.is_set():
                logger.warning("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Å—ë –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤")
                return

        try:
            async with session_scope() as session:
                repo = NewsRepository(session)
                unprocessed = await repo.get_unprocessed_news(limit=1)  # –¢–æ–ª—å–∫–æ 1 –Ω–æ–≤–æ—Å—Ç—å –∑–∞ —Ä–∞–∑

                for news in unprocessed:
                    try:
                        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                        gc.collect()
                        if torch.cuda.is_available():
                            torch.cuda.empty_cache()

                        loop = asyncio.get_running_loop()
                        analysis = await loop.run_in_executor(
                            None,
                            self.analyzer.generate_analysis,
                            news
                        )
                        await repo.save_analysis(news.id, analysis)
                        self.stats["news_processed"] += 1

                        # –ü–∞—É–∑–∞ –¥–ª—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è GPU
                        await asyncio.sleep(10)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news.id}: {str(e)}")
                        self.stats["errors"] += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            self.stats["errors"] += 1
            await self.publisher.send_admin_notification(f"üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    @handle_errors
    async def publish_pending_analyses(self):
        try:
            async with session_scope() as session:
                repo = NewsRepository(session)
                unpublished = await repo.get_unpublished_analysis(limit=5)

                for item in unpublished:
                    try:
                        success = await self.publisher.publish_analysis(
                            item.news_id,
                            item.news.title,
                            item.news.url,
                            item.analysis
                        )
                        if success:
                            await repo.mark_as_published(item.news_id)
                            self.stats["analyses_published"] += 1
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑: {item.news_id}")
                            self.stats["errors"] += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
                        self.stats["errors"] += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            self.stats["errors"] += 1
            await self.publisher.send_admin_notification(f"üö® –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

    @handle_errors
    async def run_full_cycle(self):
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await self.fetch_new_news()
        await self.process_pending_news()
        await self.publish_pending_analyses()

        logger.info(
            f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: –ù–æ–≤–æ—Å—Ç–µ–π: {self.stats['news_fetched']}, "
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['news_processed']}, "
            f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {self.stats['analyses_published']}, "
            f"–û—à–∏–±–æ–∫: {self.stats['errors']}"
        )

        if self.stats['errors'] > 0:
            await self.publisher.send_admin_notification(
                f"‚ö†Ô∏è –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —Å {self.stats['errors']} –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )

        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for key in self.stats:
            self.stats[key] = 0

    @handle_errors
    async def start_periodic_processing(self):
        logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            await self.publisher.send_admin_notification("üöÄ –°–∏—Å—Ç–µ–º–∞ –ò–ò-–õ–µ–Ω–∏–Ω –∑–∞–ø—É—â–µ–Ω–∞")
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            await self.run_full_cycle()
            logger.info("–ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            logger.info("–í—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            while True:
                logger.info("–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                start_time = time.time()
                await self.run_full_cycle()
                elapsed = time.time() - start_time
                sleep_time = max(1, self.config.UPDATE_INTERVAL - elapsed)
                logger.info(f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫. –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time} —Å–µ–∫.")
                await asyncio.sleep(sleep_time)

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            await self.publisher.send_admin_notification(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:500]}")
            raise